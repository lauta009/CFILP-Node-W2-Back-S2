openapi: 3.0.0
info:
  title: API Biblioteca
  version: 1.0.0
  description: Documentación de la API para la gestión de libros, usuarios y alquileres

servers:
  - url: https://cfilp-node-w2-back-s2-production.up.railway.app/api

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LibroInput:
      type: object
      required:
        - titulo
        - isbn
        - categoria
        - editorial
        - autores
      properties:
        titulo:
          type: string
        isbn:
          type: string
        categoria:
          type: string
          description: ID o nombre de la categoría
        editorial:
          type: string
          description: ID o nombre de la editorial
        autores:
          type: array
          description: Lista de autores (nombres o IDs)
          items:
            type: string
        saga_coleccion:
          type: string
        fecha_publicacion:
          type: string
          format: date
        resumen:
          type: string
        portada_url:
          type: string
          format: uri
        idioma:
          type: string
        nro_paginas:
          type: integer
        es_premium:
          type: boolean

    Libro:
      type: object
      properties:
        id:
          type: integer
        titulo:
          type: string
        isbn:
          type: string
        categoria:
          type: string
        editorial:
          type: string
        autores:
          type: array
          items:
            type: string
        saga_coleccion:
          type: string
        fecha_publicacion:
          type: string
          format: date
        resumen:
          type: string
        portada_url:
          type: string
          format: uri
        idioma:
          type: string
        nro_paginas:
          type: integer
        es_premium:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
security:
  - bearerAuth: []

tags:
  - name: Autenticación
    description: Endpoints relacionados con login y registro de usuarios
  - name: Libros
    description: Gestión de libros
  - name: Perfil
    description: Visualización y edición del perfil del usuario
  - name: Usuarios
    description: Administración de usuarios

paths:
  /auth/login:
    post:
      tags:
        - Autenticación
      summary: Login
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password

      responses:
        "200":
          description: Token de autenticación exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        "401":
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Credenciales inválidas
        "400":
          description: Error en la solicitud
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Error en la solicitud
  /auth/register:
    post:
      tags:
          - Autenticación
      summary: Registro
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  description: Nombre del usuario
                  example: Jaimito
                apellido:
                  type: string
                  description: Apellido del usuario
                  example: Pérez
                email:
                  type: string
                  description: Correo electrónico del usuario
                  example: jaimito.perez@gmail.com
                password:
                  type: string
                  description: Contraseña del usuario de al menos 6 caracteres
                  example: 123456
                telefono:
                  type: string
                  description: Teléfono del usuario
                  example: 2954368799
                direccion:
                  type: string
                  description: Domicilio real del usuario
                  example: Calle Falsa 123
                localidad:
                  type: string
                  description: Localidad del usuario
                  example: Buenos Aires
                nro_doc:
                  type: integer
                  description: Número de documento del usuario
                  example: 32123654
                cod_postal:
                  type: integer
                  description: Código postal del usuario
                  example: 1234
              required:
                - email
                - password
                - nombre
                - apellido
                - telefono
                - direccion
                - localidad
                - nro_doc
                - cod_postal
      responses:
        "201":
          description: Usuario registrado
        "400":
          description: Error en la solicitud vinculado a la validación de datos
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Error en la solicitud  
                              
  /mi_perfil:
    get:
      tags:
        - Perfil
      summary: Obtener perfil
      responses:
        "200":
          description: Detalles del perfil del usuario       
  /mi_perfil/actualizarMiPerfil:
    put:
      tags:
        - Perfil
      summary: Actualizar perfil
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  description: Nombre del usuario
                  example: Jaimito
                apellido:
                  type: string
                  description: Apellido del usuario
                  example: Pérez
                email:
                  type: string
                  description: Correo electrónico del usuario
                  example: jaimito.perez2@gmail.com
                password:
                  type: string
                  description: Contraseña del usuario de al menos 6 caracteres
                  example: 123456
                telefono:
                  type: string
                  description: Teléfono del usuario
                  example: 2954368799
                direccion:
                  type: string
                  description: Domicilio real del usuario
                  example: Calle Falsa 321
                localidad:
                  type: string
                  description: Localidad del usuario
                  example: Buenos Aires
                nro_doc:
                  type: integer
                  description: Número de documento del usuario
                  example: 32123654
                cod_postal:
                  type: integer
                  description: Código postal del usuario
                  example: 1234
  /mi_perfil/actualizarPassword:
    put:
      tags:
        - Perfil
      summary: Actualizar contraseña
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                password_actual:
                  type: string
                  description: Contraseña actual del usuario de al menos 6 caracteres
                  example: 123456
                password:
                  type: string
                  description: Nueva contraseña del usuario de al menos 6 caracteres
                  example: 123456
                password_confirm:
                  type: string
                  description: Confirmación de la nueva contraseña del usuario de al menos 6 caracteres
                  example: 123456
      responses:
        "201":
          description: Contraseña actualizada
        "400":
          description: Error en la solicitud vinculado a la validación de datos
        "500":
          description: Error interno del servidor
 
  /libros:
    get:
      summary: Listar libros con filtros, paginación y detalle
      tags:
        - Libros
      parameters:
        - name: categoria
          in: query
          description: Filtrar por nombre o ID de categoría
          required: false
          schema:
            type: string
        - name: editorial
          in: query
          description: Filtrar por nombre o ID de editorial
          required: false
          schema:
            type: string
        - name: autor
          in: query
          description: Filtrar por nombre o ID de autor
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Número de página (empieza en 1)
          required: false
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          description: Cantidad máxima de libros por página
          required: false
          schema:
            type: integer
            minimum: 1
        - name: detalle
          in: query
          description: Nivel de detalle de los datos devueltos (`completo` o `basico`)
          required: false
          schema:
            type: string
            enum: [completo, basico]
            default: completo
      responses:
        '200':
          description: Lista de libros obtenida correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: Total de libros encontrados
                  page:
                    type: integer
                    description: Página actual
                  limit:
                    type: integer
                    description: Límite de libros por página
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Libro'
        '500':
          description: Error del servidor
    post:
      summary: Crear nuevo libro
      tags:
        - Libros
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - titulo
                - isbn
                - categoria
                - editorial
                - autores
              properties:
                titulo:
                  type: string
                  description: Título del libro
                isbn:
                  type: string
                  description: ISBN del libro (validado con OpenLibrary)
                categoria:
                  type: string
                  description: ID o nombre de la categoría. Se crea si no existe.
                editorial:
                  type: string
                  description: ID o nombre de la editorial. Se crea si no existe.
                autores:
                  type: string
                  description: Lista de nombres o IDs separados por coma. Se crean si no existen.
                saga_coleccion:
                  type: string
                fecha_publicacion:
                  type: string
                  format: date
                resumen:
                  type: string
                portada_url:
                  type: string
                  format: uri
                idioma:
                  type: string
                nro_paginas:
                  type: integer
                es_premium:
                  type: boolean
          application/json:
            schema:
              $ref: '#/components/schemas/LibroInput'    
      responses:
        '201':
          description: Libro creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Libro'
        '400':
          description: Error en la validación de los datos
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: El título es obligatorio

  /libros/obtener-uno/{id}:
    get:
      tags:
        - Libros
      summary: Obtener libro por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Detalles del libro
  /libros/actualizar/{id}:
    put:
      tags:
        - Libros
      summary: Actualizar libro por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                titulo:
                  type: string
                  description: Título del libro
                  maxLength: 150
                  example: El nombre del viento
                saga_coleccion:
                  type: string
                  description: Saga o colección (opcional)
                  maxLength: 100
                  example: Crónica del asesino de reyes
                editorial_id:
                  type: integer
                  description: ID de la editorial (opcional, debe existir en base de datos)
                  example: 1
                editorial:
                  type: string
                  description: Nombre de la editorial (opcional)
                  maxLength: 255
                  example: Penguin Random House
                categoria_id:
                  type: integer
                  description: ID de la categoría (opcional, debe existir en base de datos)
                  example: 2
                categoria:
                  type: string
                  description: Nombre de la categoría (opcional)
                  maxLength: 255
                  example: Fantasía
                fecha_publicacion:
                  type: string
                  format: date
                  description: Fecha de publicación en formato YYYY-MM-DD
                  example: 2007-03-27
                isbn:
                  type: string
                  maxLength: 17
                  description: Código ISBN válido (se verifica contra OpenLibrary)
                  example: 9788401352836
                resumen:
                  type: string
                  description: Resumen o sinopsis del libro
                  example: Una historia épica sobre magia, conocimiento y destino.
                portada_url:
                  type: string
                  format: uri
                  description: URL de la portada del libro
                  example: https://ejemplo.com/portada.jpg
                idioma:
                  type: string
                  maxLength: 50
                  description: Idioma del libro
                  example: Español
                nro_paginas:
                  type: integer
                  minimum: 1
                  description: Número total de páginas
                  example: 672

      responses:
        "200":
          description: Libro actualizado exitosamente
  
  /libros/buscar:
    get:
      tags:
        - Libros
      summary: Buscar libros por título o saga
      description: Retorna una lista de libros que coincidan con los parámetros de búsqueda (título o saga).
      parameters:
        - in: query
          name: titulo
          schema:
            type: string
          description: Parte del título del libro a buscar
          example: El nombre del viento
        - in: query
          name: saga
          schema:
            type: string
          description: Parte del nombre de la saga o colección
          example: Crónica del asesino de reyes
      responses:
        '200':
          description: Libros encontrados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Libro'  # Usar si tenés un schema definido para "Libro"
        '400':
          description: Error en los parámetros de búsqueda
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Parámetros inválidos
        '500':
          description: Error del servidor al buscar libros
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No se pudieron buscar los libros

  /libros/mas-alquilados/historico:
    get:
      tags:
        - Libros
      summary: Obtener los libros más alquilados históricamente
      description: Retorna una lista de libros ordenados por la cantidad de veces que fueron alquilados en toda la historia.
      responses:
        '200':
          description: Lista de libros más alquilados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LibroConAlquileres'
        '500':
          description: Error al obtener los libros más alquilados
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Error al obtener los libros más alquilados históricamente
                  detalles:
                    type: string
                    example: Detalle del error técnico

  /libros/ejemplares/{estado}:
    get:
      tags:
        - Libros
      summary: Obtener libros con ejemplares filtrados por estado
      description: Devuelve todos los libros que tienen al menos un ejemplar con el estado indicado (por ejemplo: "disponible", "prestado", etc.).
      parameters:
        - in: path
          name: estado
          required: true
          schema:
            type: string
          description: Estado del ejemplar (Ej disponible, prestado, reparacion, baja)
          example: disponible
      responses:
        '200':
          description: Lista de libros con al menos un ejemplar en el estado solicitado
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LibroConCantidadEjemplares'
        '500':
          description: Error al obtener los libros por estado de ejemplar
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Error al obtener libros con ejemplares en estado disponible
  
  /users:
    get:
      tags:
        - Usuarios
      summary: Listar usuarios
      responses:
        "200":
          description: Lista de usuarios
  /users/{id}:
    get:
      summary: Obtener usuario por ID
      tags: [Usuarios]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del usuario
      responses:
        '200':
          description: Usuario obtenido correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  nombre:
                    type: string
                    example: Juan Pérez
                  email:
                    type: string
                    example: juan@example.com
                  rol:
                    type: string
                    example: admin
        '403':
          description: No autorizado
        '404':
          description: Usuario no encontrado
    
  /users/{id}:
    put:
      summary: Actualizar un usuario por ID
      tags: 
        - Usuarios
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del usuario a actualizar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioUpdate'
      responses:
        '200':
          description: Usuario actualizado correctamente
        '400':
          description: Datos inválidos
        '403':
          description: No autorizado
        '404':
          description: Usuario no encontrado


  delete:
    summary: Eliminar o bloquear un usuario por ID
    tags: 
      - Usuarios
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID del usuario a eliminar o bloquear
    responses:
      '200':
        description: Usuario eliminado o bloqueado correctamente
      '400':
        description: ID inválido
      '403':
        description: No autorizado
      '404':
        description: Usuario no encontrado

  /alquileres:
    get:
      tags:
        - Alquileres
      summary: Obtener todos los alquileres
      responses:
        '200':
          description: Lista de alquileres obtenida correctamente
        '500':
          description: Error al obtener los alquileres

  /alquileres/obtener-uno/{id}:
    get:
      tags:
        - Alquileres
      summary: Obtener un alquiler por ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID del alquiler a buscar
      responses:
        '200':
          description: Alquiler encontrado
        '404':
          description: Alquiler no encontrado
        '500':
          description: Error al obtener el alquiler

  /alquileres/activos:
    get:
      tags:
        - Alquileres
      summary: Obtener alquileres activos
      responses:
        '200':
          description: Lista de alquileres activos
        '500':
          description: Error al obtener los alquileres activos

  /alquileres/vencidos:
    get:
      tags:
        - Alquileres
      summary: Obtener alquileres activos vencidos
      responses:
        '200':
          description: Lista de alquileres vencidos
        '500':
          description: Error al obtener los alquileres vencidos

  /alquileres/regular:
    post:
      tags:
        - Alquileres
      summary: Crear un alquiler regular
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ejemplar_id
              properties:
                ejemplar_id:
                  type: integer
                  example: 123
      responses:
        '201':
          description: Alquiler regular creado
        '400':
          description: Error al crear el alquiler

  /alquiler/premium:
    post:
      tags:
        - Alquileres
      summary: Crear un alquiler premium
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ejemplar_id
              properties:
                ejemplar_id:
                  type: integer
                  example: 456
      responses:
        '201':
          description: Alquiler premium creado
        '400':
          description: Error al crear el alquiler premium

  /alquiler/devolucion:
    post:
      tags:
        - Alquileres
      summary: Devolver un ejemplar alquilado
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - usuario_id
                - ejemplar_id
              properties:
                usuario_id:
                  type: integer
                  example: 10
                ejemplar_id:
                  type: integer
                  example: 123
      responses:
        '200':
          description: Ejemplar devuelto correctamente
        '400':
          description: Error al devolver el ejemplar
  
  /categorias:
    get:
      summary: Obtener todas las categorías
      tags: [Categorías]
      responses:
        '200':
          description: Lista de categorías
        '500':
          description: Error del servidor

    post:
      summary: Crear una nueva categoría
      tags: [Categorías]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nombre]
              properties:
                nombre:
                  type: string
                categoria_padre_id:
                  type: integer
      responses:
        '201':
          description: Categoría creada correctamente
        '400':
          description: Error de validación
        '403':
          description: No autorizado

  /categorias/arbol:
    get:
      summary: Obtener árbol de categorías
      tags: [Categorías]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Árbol de categorías
        '403':
          description: No autorizado
        '500':
          description: Error del servidor

  /categorias/arbol-con-libros:
    get:
      summary: Obtener árbol de categorías con libros
      tags: [Categorías]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Árbol de categorías con libros
        '403':
          description: No autorizado
        '500':
          description: Error del servidor

  /categorias/obtener-una/{id}:
    get:
      summary: Obtener una categoría por ID
      tags: [Categorías]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Categoría encontrada
        '404':
          description: Categoría no encontrada
        '400':
          description: Error de validación

  /categorias/{id}:
    put:
      summary: Actualizar una categoría por ID
      tags: [Categorías]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                categoria_padre_id:
                  type: integer
      responses:
        '200':
          description: Categoría actualizada
        '400':
          description: Error de validación
        '404':
          description: Categoría no encontrada

    delete:
      summary: Eliminar una categoría por ID
      tags: [Categorías]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Categoría eliminada
        '404':
          description: Categoría no encontrada

  /ejemplares:
    get:
      summary: Obtener todos los ejemplares
      tags: [Ejemplares]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de ejemplares
        '403':
          description: No autorizado
        '400':
          description: Error de validación

    post:
      summary: Crear un nuevo ejemplar
      tags: [Ejemplares]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ejemplar'
      responses:
        '201':
          description: Ejemplar creado exitosamente
        '400':
          description: Error de validación
        '403':
          description: No autorizado

  /ejemplares/{id}:
    get:
      summary: Obtener un ejemplar por ID
      tags: [Ejemplares]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Ejemplar encontrado
        '404':
          description: Ejemplar no encontrado
        '400':
          description: Error de validación

    delete:
      summary: Eliminar un ejemplar por ID
      tags: [Ejemplares]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Ejemplar eliminado
        '404':
          description: Ejemplar no encontrado
        '403':
          description: No autorizado

  /ejemplares/actualizar/{id}:
    put:
      summary: Actualizar ejemplar por ID
      tags: [Ejemplares]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ejemplar'
      responses:
        '200':
          description: Ejemplar actualizado
        '404':
          description: Ejemplar no encontrado
        '403':
          description: No autorizado

  /ejemplares/codigo/{codigo_barra}:
    get:
      summary: Obtener ejemplar por código de barra
      tags: [Ejemplares]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: codigo_barra
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ejemplar encontrado
        '404':
          description: Ejemplar no encontrado
        '400':
          description: Código inválido
        '403':
          description: No autorizado

    put:
      summary: Actualizar ejemplar por código de barra
      tags: [Ejemplares]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: codigo_barra
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ejemplar'
      responses:
        '200':
          description: Ejemplar actualizado
        '404':
          description: Ejemplar no encontrado
        '403':
          description: No autorizado



     